<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Mocha Tests" time="3.2550000000000003" tests="55" failures="0">
  <testsuite name="Root Suite" timestamp="2019-06-13T05:59:12" tests="0" failures="0" time="0">
  </testsuite>
  <testsuite name="ParseEnvVar" timestamp="2019-06-13T05:59:12" tests="11" file="/Users/alessandro/Desktop/Code/SMConfig/test/parseEnvVar.test.ts" failures="0" time="0.007">
    <testcase name="ParseEnvVar Single key-value pair" time="0.003" classname="Single key-value pair">
    </testcase>
    <testcase name="ParseEnvVar Single key-value pair (nested)" time="0" classname="Single key-value pair (nested)">
    </testcase>
    <testcase name="ParseEnvVar Multiple key-value pairs" time="0" classname="Multiple key-value pairs">
    </testcase>
    <testcase name="ParseEnvVar Multiple key-value pairs (nested)" time="0.001" classname="Multiple key-value pairs (nested)">
    </testcase>
    <testcase name="ParseEnvVar Ending with whitespace characters" time="0" classname="Ending with whitespace characters">
    </testcase>
    <testcase name="ParseEnvVar Numeric values" time="0" classname="Numeric values">
    </testcase>
    <testcase name="ParseEnvVar Quoted values" time="0.001" classname="Quoted values">
    </testcase>
    <testcase name="ParseEnvVar Quoted keys" time="0" classname="Quoted keys">
    </testcase>
    <testcase name="ParseEnvVar Escape character" time="0" classname="Escape character">
    </testcase>
    <testcase name="ParseEnvVar Multiple spacing characters between pairs" time="0.001" classname="Multiple spacing characters between pairs">
    </testcase>
    <testcase name="ParseEnvVar Invalid syntax" time="0.001" classname="Invalid syntax">
    </testcase>
  </testsuite>
  <testsuite name="SMConfig test via shell" timestamp="2019-06-13T05:59:12" tests="6" file="/Users/alessandro/Desktop/Code/SMConfig/test/shell.test.ts" failures="0" time="3.1830000000000003">
    <testcase name="SMConfig test via shell Call the test script" time="0.597" classname="Call the test script">
    </testcase>
    <testcase name="SMConfig test via shell Passing environment via NODE_ENV" time="0.546" classname="Passing environment via NODE_ENV">
    </testcase>
    <testcase name="SMConfig test via shell Passing param via env vars" time="0.54" classname="Passing param via env vars">
    </testcase>
    <testcase name="SMConfig test via shell Passing multiple params via env vars" time="0.502" classname="Passing multiple params via env vars">
    </testcase>
    <testcase name="SMConfig test via shell Using multiple env vars" time="0.483" classname="Using multiple env vars">
    </testcase>
    <testcase name="SMConfig test via shell Env var file" time="0.515" classname="Env var file">
    </testcase>
  </testsuite>
  <testsuite name="SMConfig" timestamp="2019-06-13T05:59:16" tests="1" file="/Users/alessandro/Desktop/Code/SMConfig/test/SMConfig.test.ts" failures="0" time="0.004">
    <testcase name="SMConfig SMConfig should export a class" time="0.004" classname="SMConfig should export a class">
    </testcase>
  </testsuite>
  <testsuite name="Constructor method" timestamp="2019-06-13T05:59:16" tests="30" file="/Users/alessandro/Desktop/Code/SMConfig/test/SMConfig.test.ts" failures="0" time="0.055000000000000014">
    <testcase name="SMConfig Constructor method Configuration object" time="0.002" classname="Configuration object">
    </testcase>
    <testcase name="SMConfig Constructor method Options parameter" time="0" classname="Options parameter">
    </testcase>
    <testcase name="SMConfig Constructor method Environment: fallback to default" time="0.003" classname="Environment: fallback to default">
    </testcase>
    <testcase name="SMConfig Constructor method Environment: from hostname (using RegExp)" time="0.002" classname="Environment: from hostname (using RegExp)">
    </testcase>
    <testcase name="SMConfig Constructor method Environment: from hostname (exact string match)" time="0.001" classname="Environment: from hostname (exact string match)">
    </testcase>
    <testcase name="SMConfig Constructor method Environment: from hostname (string with *)" time="0.002" classname="Environment: from hostname (string with *)">
    </testcase>
    <testcase name="SMConfig Constructor method Environment: invalid hostname definition" time="0.003" classname="Environment: invalid hostname definition">
    </testcase>
    <testcase name="SMConfig Constructor method Environment: use NODE_ENV environmental variable" time="0" classname="Environment: use NODE_ENV environmental variable">
    </testcase>
    <testcase name="SMConfig Constructor method Environment: passing environment to constructor" time="0.001" classname="Environment: passing environment to constructor">
    </testcase>
    <testcase name="SMConfig Constructor method Configuration: load default configuration" time="0.001" classname="Configuration: load default configuration">
    </testcase>
    <testcase name="SMConfig Constructor method Configuration: load configuration for specific environment" time="0.002" classname="Configuration: load configuration for specific environment">
    </testcase>
    <testcase name="SMConfig Constructor method Configuration: overwrite at runtime with environmental variables" time="0.001" classname="Configuration: overwrite at runtime with environmental variables">
    </testcase>
    <testcase name="SMConfig Constructor method Configuration: overwrite at runtime with environmental variables (nested)" time="0.001" classname="Configuration: overwrite at runtime with environmental variables (nested)">
    </testcase>
    <testcase name="SMConfig Constructor method Configuration: overwrite at runtime with multiple environmental variables" time="0.001" classname="Configuration: overwrite at runtime with multiple environmental variables">
    </testcase>
    <testcase name="SMConfig Constructor method Configuration: overwrite at runtime with environmental variables (custom var name)" time="0.001" classname="Configuration: overwrite at runtime with environmental variables (custom var name)">
    </testcase>
    <testcase name="SMConfig Constructor method Configuration: env var file" time="0.002" classname="Configuration: env var file">
    </testcase>
    <testcase name="SMConfig Constructor method Configuration: env var file does not exist" time="0.001" classname="Configuration: env var file does not exist">
    </testcase>
    <testcase name="SMConfig Constructor method Configuration: env var file is empty" time="0.002" classname="Configuration: env var file is empty">
    </testcase>
    <testcase name="SMConfig Constructor method Configuration: env var file is malformed" time="0.002" classname="Configuration: env var file is malformed">
    </testcase>
    <testcase name="SMConfig Constructor method Configuration: overwrite at runtime with environmental variables (invalid var name)" time="0.001" classname="Configuration: overwrite at runtime with environmental variables (invalid var name)">
    </testcase>
    <testcase name="SMConfig Constructor method Configuration: file does not exist" time="0" classname="Configuration: file does not exist">
    </testcase>
    <testcase name="SMConfig Constructor method Configuration: unrecognized format" time="0" classname="Configuration: unrecognized format">
    </testcase>
    <testcase name="SMConfig Constructor method Configuration: load from JSON file" time="0.002" classname="Configuration: load from JSON file">
    </testcase>
    <testcase name="SMConfig Constructor method Configuration: load from YAML file" time="0.006" classname="Configuration: load from YAML file">
    </testcase>
    <testcase name="SMConfig Constructor method Configuration: load from Hjson file" time="0.004" classname="Configuration: load from Hjson file">
    </testcase>
    <testcase name="SMConfig Constructor method Configuration: load multiple files" time="0.002" classname="Configuration: load multiple files">
    </testcase>
    <testcase name="SMConfig Constructor method Configuration: load multiple files, including a new env" time="0.002" classname="Configuration: load multiple files, including a new env">
    </testcase>
    <testcase name="SMConfig Constructor method Configuration: load multiple files, with an invalid filename" time="0.001" classname="Configuration: load multiple files, with an invalid filename">
    </testcase>
    <testcase name="SMConfig Constructor method Configuration: load from a file and an object" time="0.002" classname="Configuration: load from a file and an object">
    </testcase>
    <testcase name="SMConfig Constructor method Configuration: load from another instance of SMConfig" time="0.007" classname="Configuration: load from another instance of SMConfig">
    </testcase>
  </testsuite>
  <testsuite name="Object methods" timestamp="2019-06-13T05:59:16" tests="7" file="/Users/alessandro/Desktop/Code/SMConfig/test/SMConfig.test.ts" failures="0" time="0.006">
    <testcase name="SMConfig Object methods SMConfig.environment should return environment name" time="0.001" classname="SMConfig.environment should return environment name">
    </testcase>
    <testcase name="SMConfig Object methods SMConfig.environment should be read-only" time="0.001" classname="SMConfig.environment should be read-only">
    </testcase>
    <testcase name="SMConfig Object methods SMConfig.all should return all configuration options" time="0" classname="SMConfig.all should return all configuration options">
    </testcase>
    <testcase name="SMConfig Object methods SMConfig.all should be read-only" time="0" classname="SMConfig.all should be read-only">
    </testcase>
    <testcase name="SMConfig Object methods SMConfig.all should return a cloned object" time="0.001" classname="SMConfig.all should return a cloned object">
    </testcase>
    <testcase name="SMConfig Object methods SMConfig.get should return value for configuration key" time="0.002" classname="SMConfig.get should return value for configuration key">
    </testcase>
    <testcase name="SMConfig Object methods SMConfig.get should return a cloned object" time="0.001" classname="SMConfig.get should return a cloned object">
    </testcase>
  </testsuite>
</testsuites>